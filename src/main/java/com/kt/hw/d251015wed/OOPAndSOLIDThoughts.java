// 25.10.15. 백엔드 이신영 과제
package com.kt.hw.d251015wed;

public class OOPAndSOLIDThoughts {
	public static void main(String[] args) {
		// 객체지향과 SOLID 원칙에 대한 생각

		/*
		객체지향은 코드가 현실 세계에 있는 것처럼 느껴지게 해준다.
		각각의 클래스가 역할을 맡고, 서로 협력하는 느낌이 재미있다.
		기능들을 복잡하게 나열하는 것보다 역할별로 나눠져 있으니 정리가 쉽고,
		코드가 어떻게 돌아가는지도 이해하기 쉽다.

		SRP: 한 클래스는 한 가지 일만 한다. → 코드가 간단하고 이해하기 쉽다.
		OCP: 새로운 기능이 필요할 때 기존 코드를 수정하지 않아도 된다.
		LSP: 자식 클래스도 부모 클래스처럼 행동해야 한다. → 부모를 대신할 수 있어야 한다.
		ISP: 불필요한 메서드는 굳이 구현하거나 사용하지 않는다.
		DIP: 인터페이스에 의존한다. → 무엇을 하는지는 알되, 어떻게 하는지는 구현체가 알아서 한다.

		결론: SOLID를 이용하면 코드를 좀 더 똑똑하고, 안전하고, 유지보수하기 쉽게 만들 수 있다.
		 */
	}
}